/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.neusoft.ui.api;

import com.neusoft.ui.bean.AddressListDto;
import com.neusoft.ui.bean.EmptyDto;
import com.neusoft.ui.bean.ErrorDto;
import com.neusoft.ui.bean.RetryForm;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-10-15T13:42:47.228614900+08:00[Asia/Shanghai]")
@Api(value = "dbManager", description = "the dbManager API")
public interface DbManagerApi {

    @ApiOperation(value = "", nickname = "addUrl", notes = "add url address ", response = EmptyDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmptyDto.class),
        @ApiResponse(code = 500, message = "error 1：login fail", response = ErrorDto.class) })
    @RequestMapping(value = "/dbManager/addUrl",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<EmptyDto> addUrl(@ApiParam(value = ""  )  @Valid @RequestBody RetryForm body);


    @ApiOperation(value = "", nickname = "deleteUrl", notes = "delete url address ", response = EmptyDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmptyDto.class),
        @ApiResponse(code = 500, message = "error 1：login fail", response = ErrorDto.class) })
    @RequestMapping(value = "/dbManager/deleteUrl/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<EmptyDto> deleteUrl(@ApiParam(value = "id",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "search", notes = "search url address ", response = AddressListDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AddressListDto.class),
        @ApiResponse(code = 500, message = "error 1：login fail", response = ErrorDto.class) })
    @RequestMapping(value = "/dbManager/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AddressListDto> search();


    @ApiOperation(value = "", nickname = "updateUrl", notes = "update url address ", response = EmptyDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmptyDto.class),
        @ApiResponse(code = 500, message = "error 1：login fail", response = ErrorDto.class) })
    @RequestMapping(value = "/dbManager/updateUrl",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<EmptyDto> updateUrl(@ApiParam(value = ""  )  @Valid @RequestBody RetryForm body);

}

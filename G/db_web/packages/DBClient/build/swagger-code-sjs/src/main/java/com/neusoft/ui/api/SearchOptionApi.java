/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.neusoft.ui.api;

import com.neusoft.ui.bean.DBListDto;
import com.neusoft.ui.bean.ErrorDto;
import com.neusoft.ui.bean.RetryForm;
import com.neusoft.ui.bean.TableDataListDto;
import com.neusoft.ui.bean.TableListDto;
import com.neusoft.ui.bean.UrlListDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-10-16T11:49:18.399439400+08:00[Asia/Shanghai]")
@Api(value = "searchOption", description = "the searchOption API")
public interface SearchOptionApi {

    @ApiOperation(value = "", nickname = "searchDB", notes = "find all DB ", response = DBListDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DBListDto.class),
        @ApiResponse(code = 500, message = "error 1：Database does not exist", response = ErrorDto.class) })
    @RequestMapping(value = "/searchOption/searchDB",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DBListDto> searchDB();


    @ApiOperation(value = "", nickname = "searchDBTable", notes = "find all DB of table ", response = TableListDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TableListDto.class),
        @ApiResponse(code = 500, message = "error 1：Database does not exist", response = ErrorDto.class) })
    @RequestMapping(value = "/searchOption/searchTable/{dbName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TableListDto> searchDBTable(@ApiParam(value = "dbName",required=true) @PathVariable("dbName") String dbName);


    @ApiOperation(value = "", nickname = "searchDBTableData", notes = "find all DB of table data ", response = TableDataListDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TableDataListDto.class),
        @ApiResponse(code = 500, message = "error 1：There is a problem with the sql statement", response = ErrorDto.class) })
    @RequestMapping(value = "/searchOption/searchTableData",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TableDataListDto> searchDBTableData(@ApiParam(value = ""  )  @Valid @RequestBody RetryForm body);


    @ApiOperation(value = "", nickname = "searchDBUrl", notes = "find all url ", response = UrlListDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UrlListDto.class),
        @ApiResponse(code = 500, message = "error 1：Database does not exist", response = ErrorDto.class) })
    @RequestMapping(value = "/searchOption/dbUrl",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UrlListDto> searchDBUrl();

}
